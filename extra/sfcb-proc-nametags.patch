Process Nametags patch: allows for easy identification of loaded providers

After patching (with -p1), start sfcb like so:

sfcbd xxxxxxxxxxxxxx <sfcbd options...>

"ps a | grep sfcb" will then show:

3450 pts/1    Sl+    0:00 sfcbd main
3452 pts/1    S+     0:00 sfcbd httpd
3453 pts/1    S+     0:00 sfcbd ClassProvider
3455 pts/1    S+     0:00 sfcbd InteropProvider
3457 pts/1    S+     0:00 sfcbd ProfileProvider
3460 pts/1    S+     0:00 sfcbd InternalProvide
3474 pts/1    Sl+    0:00 sfcbd IndCIMXMLHandle

The number of 'x's supplied determines the length of the "nametag".

Tested and working on x86 with glibc.



diff --git a/httpAdapter.c b/httpAdapter.c
index abb0096..d6960f0 100644
--- a/httpAdapter.c
+++ b/httpAdapter.c
@@ -130,6 +130,10 @@ extern int      inet_aton(const char *cp, struct in_addr *inp);
 static unsigned int sessionId;
 extern char    *opsName[];
 
+// sfcb-proc-nametags.patch
+char           *nametag;
+int            nametaglen;
+
 typedef int     (*Authenticate) (char *principal, char *pwd);
 
 typedef struct _buffer {
@@ -1164,6 +1168,10 @@ handleHttpRequest(int connFd, int sslMode)
     if (r == 0) {
       currentProc = getpid();
       processName = "CIMXML-Processor";
+
+      // sfcb-proc-nametags.patch
+      strncpy(nametag,processName,nametaglen);
+
       semRelease(httpProcSem, 0);
       semAcquireUnDo(httpProcSem, 0);
       semReleaseUnDo(httpProcSem, httpProcIdX + 1);
diff --git a/providerDrv.c b/providerDrv.c
index 6042093..8ade560 100644
--- a/providerDrv.c
+++ b/providerDrv.c
@@ -146,6 +146,10 @@ unsigned long   provTimeoutInterval = 25;
 unsigned        provAutoGroup = 0;
 static int      stopping = 0;
 
+// sfcb-proc-nametags.patch
+char            * nametag;
+int             nametaglen;
+
 void            uninitProvProcCtl();
 extern void     uninitSocketPairs();
 extern void     sunsetControl();
@@ -755,6 +759,9 @@ getProcess(ProviderInfo * info, ProviderProcess ** proc)
 
       if (info->pid == 0) {
 
+        // sfcb-proc-nametags.patch
+        strncpy(nametag,info->providerName,nametaglen);
+
         currentProc = getpid();
         setSignal(SIGCHLD, SIG_DFL, 0);
         setSignal(SIGTERM, SIG_IGN, 0);
diff --git a/sfcBroker.c b/sfcBroker.c
index 5c589d8..68e3e22 100644
--- a/sfcBroker.c
+++ b/sfcBroker.c
@@ -99,6 +99,10 @@ static int      adaptersStopped = 0,
 
 extern char    *configfile;
 
+// sfcb-proc-nametags.patch
+extern char   * nametag;   /* this will hold argv[1] if argv[1] = xxxxxxx... */
+extern int    nametaglen;  /* the number of x's if above is true */
+
 typedef struct startedAdapter {
   struct startedAdapter *next;
   int             stopped;
@@ -424,6 +428,8 @@ startHttpd(int argc, char *argv[], int sslMode)
       }
     }
 
+    // sfcb-proc-nametags.patch
+    strncpy(nametag,"httpd",nametaglen);
     if (httpDaemon(argc, argv, sslMode)) {
       kill(sfcPid, 3);          /* if port in use, shutdown */
     }
@@ -557,6 +563,14 @@ main(int argc, char *argv[])
   else
     name = argv[0];
 
+  // sfcb-proc-nametags.patch
+  if (argc > 1 && strchr(argv[1],'x')) {
+    nametag = argv[1];
+    nametaglen = strlen(argv[1]);
+    memset(nametag, ' ', nametaglen);
+    strncpy(nametag,"main",nametaglen);
+  }
+
   collectStat = 0;
   colorTrace = 0;
   processName = "sfcbd";
@@ -651,11 +665,12 @@ main(int argc, char *argv[])
     }
   }
 
-  if (optind < argc) {
-    fprintf(stderr, "SFCB not started: unrecognized config property %s\n",
-            argv[optind]);
-    usage(1);
-  }
+// sfcb-proc-nametags.patch
+//  if (optind < argc) {
+//    fprintf(stderr, "SFCB not started: unrecognized config property %s\n",
+//            argv[optind]);
+//    usage(1);
+//  }
 
   startLogging(syslogLevel);
 
-- 
1.6.3.3

